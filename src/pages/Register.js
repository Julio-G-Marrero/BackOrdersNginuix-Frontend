import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { register } from "../services/authService";
import Swal from "sweetalert2";
import "./Register.css"; // âœ… Importa el archivo de estilos

const Register = () => {
  const [form, setForm] = useState({
    name: "",
    email: "",
    phone: "",  // ğŸ“Œ Agregamos el campo de telÃ©fono
    password: "",
    confirmPassword: "",
    role: "vendedor",
  });

  const [loading, setLoading] = useState(false);
  const navigate = useNavigate(); // âœ… Hook para redireccionar

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // ğŸ”¹ ValidaciÃ³n de contraseÃ±a mÃ­nima de 6 caracteres
    if (form.password.length < 6) {
      Swal.fire({
        icon: "warning",
        title: "ContraseÃ±a demasiado corta",
        text: "La contraseÃ±a debe tener al menos 6 caracteres.",
      });
      return;
    }

    // ğŸ”¹ Validar que ambas contraseÃ±as coincidan
    if (form.password !== form.confirmPassword) {
      Swal.fire({
        icon: "error",
        title: "Las contraseÃ±as no coinciden",
        text: "Verifica que ambas contraseÃ±as sean iguales.",
      });
      return;
    }

    // ğŸ”¹ Validar el formato del telÃ©fono
    const phoneRegex = /^\+?\d{10,15}$/;  // Permite formato internacional (+52...) o nacional (10-15 dÃ­gitos)
    if (!phoneRegex.test(form.phone)) {
      Swal.fire({
        icon: "error",
        title: "NÃºmero de telÃ©fono invÃ¡lido",
        text: "Ingresa un nÃºmero de telÃ©fono vÃ¡lido con al menos 10 dÃ­gitos.",
      });
      return;
    }

    setLoading(true);
    try {
      await register(form);
      Swal.fire({
        icon: "success",
        title: "Registro Exitoso",
        text: "El usuario ha sido registrado correctamente.",
        timer: 2000,
        showConfirmButton: false,
      });

      // âœ… Redirigir al usuario a la pÃ¡gina de login despuÃ©s del registro
      setTimeout(() => navigate("/login"), 2000);
    } catch (error) {
      Swal.fire({
        icon: "error",
        title: "Error al registrar",
        text: error.response?.data?.message || "No se pudo registrar el usuario.",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="register-container">
      <h2 className="register-title">Registro de Usuario</h2>
      <form onSubmit={handleSubmit} className="register-form">
        <label className="register-label">Nombre</label>
        <input
          name="name"
          placeholder="Ingresa tu nombre"
          onChange={handleChange}
          value={form.name}
          required
          className="register-input"
        />

        <label className="register-label">Correo ElectrÃ³nico</label>
        <input
          name="email"
          placeholder="Ingresa tu correo electrÃ³nico"
          type="email"
          onChange={handleChange}
          value={form.email}
          required
          className="register-input"
        />

        <label className="register-label">TelÃ©fono</label>
        <input
          name="phone"
          placeholder="Ingresa tu nÃºmero de telÃ©fono"
          type="tel"
          pattern="^\+?\d{10,15}$"  // ValidaciÃ³n HTML para el telÃ©fono
          onChange={handleChange}
          value={form.phone}
          required
          className="register-input"
        />

        <label className="register-label">ContraseÃ±a</label>
        <input
          name="password"
          placeholder="Ingresa tu contraseÃ±a"
          type="password"
          onChange={handleChange}
          value={form.password}
          required
          className="register-input"
        />

        <label className="register-label">Confirmar ContraseÃ±a</label>
        <input
          name="confirmPassword"
          placeholder="Repite tu contraseÃ±a"
          type="password"
          onChange={handleChange}
          value={form.confirmPassword}
          required
          className="register-input"
        />

        <button type="submit" className="register-button" disabled={loading}>
          {loading ? "Registrando..." : "Registrar"}
        </button>
      </form>
      <div className="enlace-pagina">
        <Link to="/login">Â¿Ya estÃ¡s registrado? Inicia SesiÃ³n.</Link>
      </div>
    </div>
  );
};

export default Register;
